/**
 * strip-unit removes units from values
 * by the bright @HugoGiraudel http://hugogiraudel.com/2013/08/12/sass-functions/
 * @param  {[number]} $value with unit
 * @return {[number]} without unit
 */
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

/**
 * px2percent calculates the relative with based on two values
 * @param  {[number]} $size
 * @param  {[number]} $contextSize
 * @return {[number in %]}
 */
@function px2percent ($size,$contextSize: $s-design-width) {
	@return ( $size / $contextSize) * 100%;
}

/**
 * px2rel turns px values in to REM's base on the base font size
 * @param  {[number]} $px Wished font size
 * @param  {[number]} $baseSize Reference Size (usualy HTML/Body font size)
 * @param  {[number]} $unit of the converted value
 * @return {[number]} Relative value inc. unit
 */
@function px2rel($px, $baseSize: $s-font-base, $unit: rem) {
	@return ( $px / $baseSize ) * 1#{$unit};
}

/**
 * rel2px converts relative values in to PX values
 * @param   {[number]} $rel           relative number to convert
 * @param   {[number]} $baseSize      multiplicator
 * @returns {[number]}                value in px
 */
@function rel2px($rel, $baseSize: $s-font-base) {
  @return (strip-unit($rel) * strip-unit($baseSize)) + px;
}

/**
 *  font-size REM fallback mixin for legacy browsers
 *  @param  {[number]} $px wished font-size / only use when needed will bloat up your CSS
 */
@mixin font-size($px) {
	font-size: ($px);
	font-size: px2rel($px);
}

/**
 *  line-height REM fallback mixin for legacy browsers
 *  @param  {[number]} $px wished line-height
 */
@mixin line-height($px) {
	line-height: ($px);
	line-height: px2rel($px);
}

/**
 * remFallback turns attributes containing rem into there PX fallback
 * also magically does the opposite (turns attributes containing PX in rem)
 * examples: http://sassmeister.com/gist/e6bd061088f289c664a9
 *
 * @param   {[string]} $attr [description]
 * @param   {[list]} $vals [description]
 */
@mixin remFallback($attr,$vals) {
  $values: null;
  $fallback: null;

  @each $val in $vals {
    @if type-of($val) == number and unit($val) == 'px' {
      $fallback: append($fallback, $val);
      $values: append($values, px2rel($val));
    } @elseif type-of($val) == number and unit($val) == 'rem' {
      $fallback: append($fallback, rel2px($val));
      $values: append($values, $val);
    } @else {
      $fallback: append($fallback, $val);
      $values: append($values, $val);
    }
  }

  @if $fallback != $values {
    #{$attr}: $fallback;
  }
  #{$attr}: $values;
}
